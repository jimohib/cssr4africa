<!-- robotLocalizationLaunchTestHarness.launch -->
<!-- Unit test launch file for robotLocalization component with test harness -->
<!-- This file connects the component to data sources and sinks using drivers and stubs -->

<launch>
    <!-- Test harness parameters -->
    <arg name="test_scenario" default="basic_localization" />
    <arg name="test_duration" default="120" />
    <arg name="bag_file" default="$(find cssr_system)/test_data/robotLocalization_test.bag" />
    
    <!-- Launch test data drivers -->
    <!-- Odometry data driver -->
    <node pkg="cssr_system" type="robotLocalizationOdometryDriver" name="odom_driver" 
          output="screen">
        <param name="data_file" value="$(find cssr_system)/test_data/test_odometry.csv" />
        <param name="publish_rate" value="10.0" />
        <param name="loop_data" value="true" />
        <param name="start_delay" value="2.0" />
        <remap from="/test_odom" to="/pepper_dcm/odom" />
    </node>
    
    <!-- Camera image data driver -->
    <node pkg="cssr_system" type="robotLocalizationImageDriver" name="image_driver" 
          output="screen">
        <param name="image_directory" value="$(find cssr_system)/test_data/test_images/" />
        <param name="publish_rate" value="5.0" />
        <param name="image_format" value="jpg" />
        <param name="loop_images" value="true" />
        <param name="start_delay" value="2.0" />
        <remap from="/test_image" to="/camera/color/image_raw" />
    </node>
    
    <!-- Depth image data driver -->
    <node pkg="cssr_system" type="robotLocalizationDepthDriver" name="depth_driver" 
          output="screen">
        <param name="depth_directory" value="$(find cssr_system)/test_data/test_depth/" />
        <param name="publish_rate" value="5.0" />
        <param name="depth_format" value="png" />
        <param name="loop_images" value="true" />
        <param name="start_delay" value="2.0" />
        <remap from="/test_depth" to="/camera/depth/image_raw" />
    </node>
    
    <!-- Camera info driver -->
    <node pkg="cssr_system" type="robotLocalizationCameraInfoDriver" name="camera_info_driver" 
          output="screen">
        <param name="camera_info_file" value="$(find cssr_system)/test_data/test_camera_info.yaml" />
        <param name="publish_rate" value="1.0" />
        <param name="start_delay" value="1.0" />
        <remap from="/test_camera_info" to="/camera/color/camera_info" />
    </node>
    
    <!-- Joint state driver (for head yaw testing) -->
    <node pkg="cssr_system" type="robotLocalizationJointDriver" name="joint_driver" 
          output="screen">
        <param name="joint_data_file" value="$(find cssr_system)/test_data/test_joint_states.csv" />
        <param name="publish_rate" value="20.0" />
        <param name="loop_data" value="true" />
        <param name="start_delay" value="1.5" />
        <remap from="/test_joint_states" to="/joint_states" />
    </node>

    <!-- Static transformations -->
    <node pkg="tf" type="static_transform_publisher" name="odom_to_map" 
          args="0 0 0 0 0 0 map odom 100" />
    <node pkg="tf" type="static_transform_publisher" name="head_to_camera_link"
          args="0.1 0.0 0.2 0.0 0.0 0.0 Head camera_link 100" />
    <node pkg="tf" type="static_transform_publisher" name="base_link_to_odom"
          args="0 0 0 0 0 0 odom base_link 100" />

    <!-- Launch robotLocalization component under test -->
    <node pkg="cssr_system" type="robotLocalization" name="robotLocalization" 
          output="screen" respawn="false">
        <!-- Test configuration parameters -->
        <param name="verbose" value="true" />
        <param name="use_depth" value="true" />
        <param name="use_head_yaw" value="true" />
        <param name="head_yaw_joint_name" value="HeadYaw" />
        <param name="reset_interval" value="15.0" />
        <param name="absolute_pose_timeout" value="30.0" />
        <param name="config_file" value="$(find cssr_system)/robotLocalization/config/test_landmarks.yaml" />
        <param name="topics_file" value="$(find cssr_system)/robotLocalization/data/testHarnessTopics.dat" />
        <param name="camera_info_file" value="$(find cssr_system)/robotLocalization/config/test_camera_info.yaml" />
        <param name="camera_info_timeout" value="8.0" />
        <param name="map_frame" value="map" />
        <param name="odom_frame" value="odom" />
        
        <!-- Unit test specific parameters -->
        <param name="unit_test_mode" value="true" />
        <param name="test_duration" value="$(arg test_duration)" />
        <param name="test_harness_mode" value="true" />
    </node>
    
    <!-- Test output stubs -->
    <!-- Pose data logger stub -->
    <node pkg="cssr_system" type="robotLocalizationPoseLogger" name="pose_logger" 
          output="screen">
        <param name="log_file" value="$(find cssr_system)/test_results/pose_log_$(arg test_scenario).csv" />
        <param name="log_rate" value="1.0" />
        <param name="include_timestamp" value="true" />
        <remap from="/robotLocalization/pose" to="/robotLocalization/pose" />
    </node>
    
    <!-- Marker image logger stub -->
    <node pkg="cssr_system" type="robotLocalizationImageLogger" name="image_logger" 
          output="screen">
        <param name="save_directory" value="$(find cssr_system)/test_results/marker_images_$(arg test_scenario)/" />
        <param name="save_rate" value="0.5" />
        <param name="image_format" value="jpg" />
        <remap from="/robotLocalization/marker_image" to="/robotLocalization/marker_image" />
    </node>
    
    <!-- Service test client -->
    <node pkg="cssr_system" type="robotLocalizationServiceTester" name="service_tester" 
          output="screen">
        <param name="test_poses" value="[[1.0, 2.0, 0.0], [2.0, 3.0, 90.0], [0.5, 1.5, -30.0]]" />
        <param name="test_interval" value="20.0" />
        <param name="test_resets" value="true" />
        <param name="reset_interval" value="40.0" />
        <param name="log_results" value="true" />
        <param name="results_file" value="$(find cssr_system)/test_results/service_test_$(arg test_scenario).csv" />
    </node>
    
    <!-- Test validation node -->
    <node pkg="cssr_system" type="robotLocalizationTestValidator" name="test_validator" 
          output="screen">
        <param name="expected_poses_file" value="$(find cssr_system)/test_data/expected_poses_$(arg test_scenario).csv" />
        <param name="tolerance_position" value="0.1" />
        <param name="tolerance_orientation" value="5.0" />
        <param name="validation_rate" value="1.0" />
        <param name="test_duration" value="$(arg test_duration)" />
        <param name="results_file" value="$(find cssr_system)/test_results/validation_$(arg test_scenario).csv" />
    </node>
    
    <!-- Test monitoring -->
    <node pkg="rostopic" type="rostopic" name="topic_hz_monitor" 
          args="hz /robotLocalization/pose" output="screen" />
          
    <!-- Optional: Record test bag for analysis -->
    <node pkg="rosbag" type="record" name="test_recorder" 
          args="-o $(find cssr_system)/test_results/test_$(arg test_scenario) 
                /robotLocalization/pose 
                /robotLocalization/marker_image 
                /camera/color/image_raw 
                /camera/depth/image_raw 
                /pepper_dcm/odom 
                /joint_states" 
          if="false" />
    
</launch>